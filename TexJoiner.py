"""Texture conversion utility for Khukuri project

This little utility creates combined textures from exported baked materials by
the UE4 material baking process. Instead of using a separate texture for each
map like roughness, metalness, AO or specular, bake these into color channels
to save textures. The resulting textures can be reimported into the UE4 Editor
and used with a very simple material.

This is a special case for the Khukuri project made for the Unreal Engine
Marketplace, but feel free to modify for any purpose.

+-------------------------+----------+-----------+----------+----+----------+
| Knife variant           | diffuse  | roughness | metallic | AO | specular |
|                         | + normal |           |          |    |          |
+-------------------------+----------+-----------+----------+----+----------+
| Solo knife              |    X     |     G     |    B     | -  |    R(*)  |
| Solo silver sheath      |    X     |     G     |    B     | -  |    -     |
| Solo leather sheath     |    X     |     G     |    B     | R  |    -     |
| Knife in silver sheath  |    X     |     G     |    B     | -  |    -     |
| Knife in leather sheath |    X     |     G     |    B     | R  |    -     |
+-------------------------+----------+-----------+----------+----+----------+

Export the textures from UE4 after they are created by material baking.
Diffuse and Normal are just converted to PNG without any further processing.
All others are joined by this script. Above table shows, which maps are
required for which mesh and which color channels are used.

For the knives with sheath combinations, 2 separate materials are baked. The
original approach to join these as well into one single texture using a mask
to have only one draw call has been dropped (problems with normal maps :)

(*) specular is used for the solo knives blood only - only export if needed

The naming of UE4 exported files is as follows (example for diffuse texture)

T_M_SM_Knife1_MI_Knife1_E22686584D98CA622DF16A8552089CC3_BaseColor.TGA
---|---01----|---02----|---------------03---------------|---04----
                 
The interesting 4 parts have been marked:
01: Mesh name used for baking in UE4
02: Material instance name. Needs MI_ prefix and must contain keywords 
    that can be detected by the script: Leather, Silver, Knife, Grip
03: GUID generated by UE4 Mesh Editor during bake
04: Type of exported texture as string, as selected during bake: 
    BaseColor, Normal, Metallic, Roughness, AmbientOcclusion or Specular
                
IMPORTANT: Export has to be done in 2K for all textures. 
"""

import os
import sys
import re
from PIL import Image

__author__ = "Herbert Mehlhose"
__copyright__ = "Copyright 2020, Herbert Mehlhose"
#__credits__ = []
__license__ = "CC0"
__version__ = "1.0"
__maintainer__ = "Herbert Mehlhose"
__email__ = ""
__status__ = "Final"

# My dictionary class
class hfcmDict(dict):
    def __missing__(self, key):
        value = self[key] = type(self)()
        return value      
      
# Subdirectory to drop in exported textures from UE4 and destination of PNGs
imagesDir = 'Work'

# Texture size
texsize = 2048
      
# Keywords to be included in material instance names to recognize function
matkeywords = ('Leather', 'Silver', 'Knife', 'Grip')

suffixes = {'BaseColor': 'D',
            'Normal': 'N',
            'Metallic': 'M',
            'Roughness': 'R',
            'AmbientOcclusion': 'O', 
            'Specular': 'S'}

images = hfcmDict()
meshes = hfcmDict()

directory = os.getcwd() + '/' + imagesDir

_R_ = re.compile('^T_M_(?P<MESH>.+)'
                  '(?P<MATINST>_MI_.+)_'
                  '(?P<GUID>[0-9A-F]{32})_'
                  '(?P<TEXTYPE>.+)')

for file in os.listdir(directory):
    filename = os.fsdecode(file)
    if filename.endswith(".TGA"):
        (filenameonly, filetype) = os.path.splitext(filename)
        Match = _R_.match(filenameonly)
        mesh = Match.group('MESH')
        matinst = Match.group('MATINST')
        guid = Match.group('GUID')
        key = matinst + '_' + guid
        if any(matkeyword in matinst for matkeyword in matkeywords):
            images[key][Match.group('TEXTYPE')] = imagesDir + '/' + filename
            meshes[key] = mesh
        else:
            print("WARNING - no matching keyword found in TGA texture file")
        continue
    else:
        continue

for texkey in images.keys():
    print("\nProcessing Texture %s" % texkey)
    mixsuffix = ''
    for imgtype in images[texkey].keys():
        print("Processing %s (%s)" % (images[texkey][imgtype],imgtype))
        try:
            imbase = Image.open(images[texkey][imgtype])
        except:
            print("Could not open image '%s'" % images[texkey][imgtype])
            sys.exit(1)
        # Resize image - e.g. roughness might be 1x1 only on export, if all
        # values are identical (optimization by UE4 baking process)
        width, height = imbase.size
        if width == 1:
            print("Resizing %s - %s" % (texkey, imgtype))
            imbase = imbase.resize((texsize, texsize))
        # Diffuse and Normal are just saved to PNG without processing
        if imgtype == 'BaseColor' or imgtype == 'Normal':
            outfile = '{:s}/T_{:s}{:s}_{:s}.png'.format(imagesDir,
                    meshes[texkey],
                    texkey,
                    suffixes[imgtype])
            print("Saving %s to %s" % (imgtype,outfile))
            imbase.save(outfile)
            continue
        # All others are processed to be combined into a single texture map
        mixsuffix += suffixes[imgtype]
        if imgtype == 'Roughness':
            RR, RG, RB = imbase.split()
        elif imgtype == 'Metallic':
            MR, MG, MB = imbase.split()
        # Share red channel used for AO on leather sheath for specular on
        # solo knife, where it is used for blood
        elif imgtype == 'AmbientOcclusion' or imgtype == 'Specular':
            OR, OG, OB = imbase.split()
        else:
            print("Cannot handle image type %s" % imgtype)
    
    # merge color channels
    # default roughness 0.5 for Knife: 188 (0.737) is correct sRGB for 0.5
    # all others: RED channel not used or AO - default is 0 (0.0)
    # NOTE: UE4 generated baked textures are all sRGB, even roughness etc.
    # which normally should have disabled sRGB.
    if 'Knife' in texkey:
        mergeimage = Image.new('RGB', (texsize, texsize), (188, 0, 0))
    else:
        mergeimage = Image.new('RGB', (texsize, texsize), (0, 0, 0))
    Xr, Xg, Xb = mergeimage.split()
    if 'R' in mixsuffix:
        Xg = RG
    if 'M' in mixsuffix:
        Xb = MB
    if 'O' in mixsuffix or 'S' in mixsuffix:
        Xr = OR

    img_final = Image.merge('RGB', (Xr, Xg, Xb))
    outfile = '{:s}/T_{:s}{:s}_{:s}.png'.format(imagesDir,
            meshes[texkey],
            texkey,
            mixsuffix)
    print("Saving %s map to %s" % (mixsuffix, outfile))
    img_final.save(outfile)
    
sys.exit(0)